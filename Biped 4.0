#include <Servo.h> 
#define tilt 15
#define side_tilt 5	//angle tilt of feet
#define mtilt 95	//angle rectification of feet so that it doesnot sweep ground
#define knee 10	
#define mknee 105	//angle tilt of knee
#define thigh 95	//angle thigh moves backward
#define mthigh 15	//angle thigh moves forward
#define relax 90	//initial or relax angle of all servo
#define sped 10	// the lesser the sped, bot will move that fast
Servo lf,rf,lk,rk,lt,rt,lst,rst;
void left_feet(int a);
void left_knee(int a);
void left_side_thigh(int a);
void left_thigh(int a);
void right_feet(int a);
void right_knee(int a);
void right_side_thigh(int a);
void right_thigh(int a);
void right_knee_right_thigh(int a,int b);
void right_thigh_left_knee(int a,int b);
void left_thigh_right_knee(int a ,int b);
void left_knee_left_thigh(int a,int b);
void right_thigh_left_thigh(int a,int b);

int lfi=90,rfi=90,lki=90,rki=90,lti=90,rti=90,lsti=90,rsti=90;;//stores final position after movement
void straight()		//sets up the bot in straight position(initial position)
{

  lfi=lf.read();
rfi= rf.read();
 lki=lk.read();
 rki=rk.read();
lti= lt.read();
rti= rt.read();
 lsti=lst.read();
 rsti=rst.read();
 Serial.println(lfi);
 Serial.println(rfi);
// lf.write(90);
// rf.write(90);
// lk.write(90);
// rk.write(90);
// lt.write(90);
// rt.write(90);
// lst.write(90);
// rst.write(90);
right_feet(97);
 left_feet(90);
 right_knee(90);
 left_knee(83);
 right_side_thigh(90);
 left_side_thigh(93);
 right_thigh(87);
 left_thigh(87);
 //lfi=90,rfi=90,lki=90,rki=90,lti=90,rti=90;lsti=90;rsti=90;
 
 
}
  void setup() 
{ 
 
Serial.begin(9600);
 lf.attach(3);
 lk.attach(4);
 lst.attach(5);
 lt.attach(6);
 rf.attach(9);
 rk.attach(10);
 rst.attach(11);
 rt.attach(12);
} 

void bot_tilt_left(){
  right_feet(rfi-tilt);
  left_side_thigh(lsti-side_tilt);
  
  left_feet(lfi+tilt);
  
}
void bot_tilt_right(){
  left_feet(lfi-tilt);
  right_side_thigh(rsti-side_tilt);
  
  right_feet(rfi+tilt);
  
}
void motors_four(int slt,int srt,int fl,int fr){
  int i=slt>0?1:-1;
  int j=srt>0?1:-1;
  int k=fl>0?1:-1;
  int l=fr>0?1:-1;
  while(slt!=0&&fl!=0&&srt!=0&&fr!=0){
    lsti+=i;
    lst.write(lsti);
    rsti+=j;
    rst.write(rsti);
    lfi+=k;
    lf.write(lfi);
    rfi+=l;
    rf.write(rfi);
    slt-=i;
    srt-=j;
    fl-=k;
    fr-=l;
    delay(sped);
  }
  while(slt!=0){
    lsti+=i;
    lst.write(lsti);
    slt-=i;
    delay(sped);
  }
  while(srt!=0){
    rsti+=j;
    rst.write(rsti);
    srt-=j;
    delay(sped);
  }
  
  while(fl!=0){
    lfi+=k;
    lf.write(lfi);
    fl-=k;
    delay(sped);
  }
   while(fr!=0){
    rfi+=l;
    rf.write(rfi);
    fr-=l;
    delay(sped);
  }
  
}
void motors_thigh_knee(int tl,int tr, int kl, int kr){
  int i=tl>0?1:-1;
  int j=tr>0?1:-1;
  int k=kl>0?1:-1;
  int l=kr>0?1:-1;
  while(tl!=0&&tr!=0&&kl!=0&&kr!=0){
    lti+=i;
    lt.write(lti);
    rti+=j;
    rt.write(rti);
    lki+=k;
    lk.write(lki);
    rki+=l;
    rk.write(rki);
    tl-=i;
    tr-=j;
    kl-=k;
    kr-=l;
    delay(sped);
  }
  while(tl!=0){
    lti+=i;
    lt.write(lti);
    tl-=i;
    delay(sped);
  }
  while(tr!=0){
    rti+=j;
    rt.write(rti);
    tr-=j;
    delay(sped);
  }
  
  while(kl!=0){
    lki+=k;
    lk.write(lki);
    kl-=k;
    delay(sped);
  }
   while(kr!=0){
    rki+=l;
    rk.write(rki);
    kr-=l;
    delay(sped);
  }
}
void walk_start()		//starts the walking process(code executed only once)
{
  
 right_thigh_left_thigh(rti,lti);
  bot_tilt_left();
  right_side_thigh(rsti+side_tilt);
  delay(0);
  right_knee_right_thigh(rki-mthigh,rti+mthigh);
  delay(0);
}
void walk2(){
  motors_four(side_tilt,-1*side_tilt,-1*tilt,tilt);
  delay(0);
  motors_thigh_knee(-1*mthigh,-1*mthigh, mthigh,mthigh);
  delay(0);
  bot_tilt_right();
  left_side_thigh(lsti+side_tilt);
  delay(0);
  left_knee_left_thigh(lki-mthigh*2,lti+mthigh*2);
  delay(0);
  motors_four(-1*side_tilt,side_tilt,tilt,-1*tilt);
  delay(0);
  motors_thigh_knee(-1*mthigh,-1*mthigh,mthigh,mthigh);
  delay(0);
  bot_tilt_left();
  right_side_thigh(rsti+side_tilt);
  delay(0);
  right_knee_right_thigh(rki-mthigh*2,rti+mthigh*2);
  
}

void kick(){
  bot_tilt_left();
    //delay(500);
    left_side_thigh(lsti+2*side_tilt);
    //delay(500);
  //right_knee_right_thigh(rki-mthigh*2,rti+mthigh);
    //delay(500);
  right_knee(rki-mthigh*3);
  delay(1000);
  right_knee_speed(rki+mthigh*3);
  right_knee_right_thigh_speed(rki+mthigh,rti+mthigh);
  //delay(500);
   right_thigh_left_thigh(rti-5,lti-5);
  
  
}

void sidewalk(){
  bot_tilt_right();
  left_side_thigh(lsti+side_tilt*4);
  left_feet(lfi-side_tilt*4+tilt);
  right_feet(rfi-tilt);
  right_side_thigh(rsti+side_tilt);
  motors_four(side_tilt*(-4),side_tilt*4,side_tilt*4,side_tilt*(-4));
  bot_tilt_left();
  right_feet(rfi+side_tilt*4+tilt);
  right_side_thigh(rsti-side_tilt*4);
//  left_feet(lfi-tilt);
//  left_side_thigh(lsti+side_tilt);
straight();
  
}


void loop() 
{ 
  straight();
  delay(3000);
  for(int i=0; i<3; i++){
    sidewalk();
  }
  walk_start();
  for(int i=0; i<3; i++)
    walk2();
  straight();
  kick();
  
  while(1);
} 
void sweep(Servo myServo,int* initial,int final){
  int i=*initial,toDecrease=1;
  if(final<*initial){ 
    toDecrease=-1;
  }
  
  while(final!=i){
    i+=toDecrease;
    myServo.write(i);
    delay(sped);
  }
  *initial = i;
  
}
void sweep(Servo myServo,int* initial,int final,int abcd){
  int i=*initial,toDecrease=1;
  if(final<*initial){ 
    toDecrease=-1;
  }
  
  while(final!=i){
    i+=toDecrease;
    myServo.write(i);
    delay(sped/3);
  }
  *initial = i;
  
}

void right_thigh_left_thigh(int a,int b){
  int x,y;
  x=rti,y=lti;
  int i=(rti>a?-1:1),j=(lti>b?-1:1);
  while(x!=a && y!=b){
    x+=i;
    y+=j;
    right_thigh(x);
    left_thigh(y);
  }
  while(x!=a){
    x+=i;
   right_thigh(x);
  }
  while(y!=b){
     y+=j;
     left_thigh(y);
  }
}
//change
void right_knee_right_thigh(int a,int b)	//to move right knee and right thigh together to required pos
{
  int i=(rki>a?-1:1),j=(rti>b?-1:1);
  while(rki!=a && rti!=b){
    rki+=i;
    rti+=j;
    rk.write(rki);
    rt.write(rti);
    delay(sped);
  }
  while(rki!=a){
    rki+=i;
   rk.write(rki);
    delay(sped);
  }
  while(rti!=b){
     rti+=j;
      rt.write(rti);
    delay(sped);
  }
  
}
void right_knee_right_thigh_speed(int a,int b)	//to move right knee and right thigh together to required pos
{
  int i=(rki>a?-1:1),j=(rti>b?-1:1);
  while(rki!=a && rti!=b){
    rki+=i;
    rti+=j;
    rk.write(rki);
    rt.write(rti);
    delay(sped/2);
  }
  while(rki!=a){
    rki+=i;
   rk.write(rki);
    delay(sped/2);
  }
  while(rti!=b){
     rti+=j;
      rt.write(rti);
    delay(sped/2);
  }
  
}
void left_knee_left_thigh(int a,int b)	//to move right knee and right thigh together to required pos
{
  int i=(lki>a?-1:1),j=(lti>b?-1:1);
  while(lki!=a && rki!=b){
    lki+=i;
    lk.write(lki);
    lti+=j;
    lt.write(lti);
    delay(sped);
  }
  while(lki!=a){
    lki+=i;
   lk.write(lki);
   delay(sped);
  }
  while(lti!=b){
     lti+=j;
    lt.write(lti);
    delay(sped);
  }
  
}
//change
void right_thigh_left_knee(int a,int b)		//to move right thigh and left knee together to required position
{
  int i,j;
  for(i=rti,j=lki; i>=a && j>=b; i-=1,j-=1)
  {
    rt.write(i);
    lk.write(j);
      delay(sped);
  }
  rti=i;
  lki=j;
}
//change
void left_thigh_right_knee(int a ,int b)	//to move left thigh and right knee together to required position
{
  int i,j;
  for(i=lti,j=rki; i<=a && j<=b; i+=2,j+=1)
  {
    lt.write(i);
    rk.write(j);
      delay(sped);
  }
  lti=i;
  rki=j;
}
void left_feet(int a)//to move left feet the required pos by argumnet
{
  sweep(lf,&lfi,a);
}
void left_knee(int a)//to move left knee the required pos by argumnet
{
  sweep(lk,&lki,a);
}
void left_thigh(int a)//to move left thigh the required pos by argumnet
{
  sweep(lt,&lti,a);
}
void left_side_thigh(int a)//to move left side thigh the required pos by argumnet
{
  sweep(lst,&lsti,a);
}
void right_feet(int a)//to move right feet the required pos by argumnet
{
  sweep(rf,&rfi,a);
}
void right_knee(int a)//to move left knee the required pos by argumnet
{
 sweep(rk,&rki,a);
}
void right_knee_speed(int a)//to move left knee the required pos by argumnet
{
 sweep(rk,&rki,a,0);
}
void right_thigh(int a)//to move left thigh the required pos by argumnet
{
  sweep(rt,&rti,a);
}
void right_side_thigh(int a)//to move left thigh the required pos by argumnet
{
  sweep(rst,&rsti,a);
}
